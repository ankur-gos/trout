Terminals unused in grammar

   TOK_BLOCK
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_RETURNVOID
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_PARAMLIST
   TOK_VARDECL
   TOK_NEWSTRING
   TOK_DECLID
   TOK_VAR
   TOK_CALL
   TOK_INDEX


State 51 conflicts: 2 shift/reduce
State 52 conflicts: 2 shift/reduce
State 53 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce
State 111 conflicts: 2 shift/reduce
State 112 conflicts: 2 shift/reduce
State 113 conflicts: 2 shift/reduce
State 115 conflicts: 15 shift/reduce
State 145 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | /* empty */

    6 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    7          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}'
    8          | TOK_STRUCT TOK_IDENT '{' fielddeclarray '}'

    9 fielddeclarray: fielddeclarray fielddecl ';'
   10               | fielddecl ';' fielddecl ';'

   11 fielddecl: basetype TOK_IDENT
   12          | basetype TOK_ARRAY TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_INT
   15         | TOK_STRING
   16         | TOK_CHAR
   17         | TOK_IDENT

   18 function: identdecl '(' ')' block
   19         | identdecl '(' identdecl ')' block
   20         | identdecl identdeclarray ')' block

   21 identdeclarray: '(' identdecl ',' identdecl
   22               | identdeclarray ',' identdecl

   23 identdecl: basetype TOK_IDENT
   24          | basetype TOK_ARRAY TOK_IDENT

   25 block: '{' '}'
   26      | ';'
   27      | '{' statement '}'
   28      | statementarray '}'

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 statementarray: statementarray statement
   36               | '{' statement statement

   37 vardecl: identdecl '=' expr ';'

   38 while: TOK_WHILE '(' expr ')' statement

   39 ifelse: TOK_IF '(' expr ')' statement
   40       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   41 return: TOK_RETURN ';'
   42       | TOK_RETURN expr ';'

   43 expr: expr '=' expr
   44     | expr TOK_EQ expr
   45     | expr TOK_GT expr
   46     | expr TOK_GE expr
   47     | expr TOK_LT expr
   48     | expr TOK_LE expr
   49     | expr TOK_NE expr
   50     | expr '+' expr
   51     | expr '-' expr
   52     | expr '*' expr
   53     | expr '/' expr
   54     | expr '%' expr
   55     | expr '^' expr
   56     | '!' expr
   57     | '+' expr
   58     | '-' expr
   59     | allocator
   60     | call
   61     | '(' expr ')'
   62     | variable
   63     | constant

   64 allocator: TOK_NEW TOK_IDENT '(' ')'
   65          | TOK_NEW TOK_STRING '(' expr ')'
   66          | TOK_NEW basetype '[' expr ']'

   67 call: TOK_IDENT '(' ')'
   68     | TOK_IDENT '(' expr ')'
   69     | TOK_IDENT arglist ')'

   70 arglist: arglist ',' expr
   71        | '(' expr ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 56
'%' (37) 54
'(' (40) 18 19 21 38 39 40 61 64 65 67 68 71
')' (41) 18 19 20 38 39 40 61 64 65 67 68 69
'*' (42) 52
'+' (43) 50 57
',' (44) 21 22 70 71
'-' (45) 51 58
'.' (46) 74
'/' (47) 53
';' (59) 7 9 10 26 34 37 41 42
'=' (61) 37 43
'[' (91) 66 73
']' (93) 66 73
'^' (94) 55
'{' (123) 6 7 8 25 27 36
'}' (125) 6 7 8 25 27 28
error (256)
TOK_VOID (258) 13
TOK_CHAR (259) 16
TOK_INT (260) 14
TOK_STRING (261) 15 65
TOK_WHILE (262) 38
TOK_RETURN (263) 41 42
TOK_STRUCT (264) 6 7 8
TOK_NULL (265) 78
TOK_NEW (266) 64 65 66
TOK_ARRAY (267) 12 24
TOK_EQ (268) 44
TOK_NE (269) 49
TOK_LT (270) 47
TOK_LE (271) 48
TOK_GT (272) 45
TOK_GE (273) 46
TOK_IDENT (274) 6 7 8 11 12 17 23 24 64 67 68 69 72 74
TOK_INTCON (275) 75
TOK_CHARCON (276) 76
TOK_STRINGCON (277) 77
TOK_BLOCK (278)
TOK_IFELSE (279)
TOK_INITDECL (280)
TOK_POS (281)
TOK_NEG (282)
TOK_NEWARRAY (283)
TOK_TYPEID (284)
TOK_FIELD (285)
TOK_ORD (286)
TOK_CHR (287)
TOK_ROOT (288)
TOK_RETURNVOID (289)
TOK_FUNCTION (290)
TOK_PROTOTYPE (291)
TOK_PARAMLIST (292)
TOK_VARDECL (293)
TOK_NEWSTRING (294)
TOK_DECLID (295)
TOK_VAR (296)
TOK_ELSE (297) 40
TOK_IF (298) 39 40
TOK_CALL (299)
TOK_INDEX (300)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
start (64)
    on left: 1, on right: 0
program (65)
    on left: 2 3 4 5, on right: 1 2 3 4
structdef (66)
    on left: 6 7 8, on right: 2
fielddeclarray (67)
    on left: 9 10, on right: 8 9
fielddecl (68)
    on left: 11 12, on right: 7 9 10
basetype (69)
    on left: 13 14 15 16 17, on right: 11 12 23 24 66
function (70)
    on left: 18 19 20, on right: 3
identdeclarray (71)
    on left: 21 22, on right: 20 22
identdecl (72)
    on left: 23 24, on right: 18 19 20 21 22 37
block (73)
    on left: 25 26 27 28, on right: 18 19 20 29
statement (74)
    on left: 29 30 31 32 33 34, on right: 4 27 35 36 38 39 40
statementarray (75)
    on left: 35 36, on right: 28 35
vardecl (76)
    on left: 37, on right: 30
while (77)
    on left: 38, on right: 31
ifelse (78)
    on left: 39 40, on right: 32
return (79)
    on left: 41 42, on right: 33
expr (80)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62 63, on right: 34 37 38 39 40 42 43 44 45 46 47 48 49 50 51
    52 53 54 55 56 57 58 61 65 66 68 70 71 73 74
allocator (81)
    on left: 64 65 66, on right: 59
call (82)
    on left: 67 68 69, on right: 60
arglist (83)
    on left: 70 71, on right: 69 70
variable (84)
    on left: 72 73 74, on right: 62
constant (85)
    on left: 75 76 77 78, on right: 63


State 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_STRUCT     shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    $default  reduce using rule 1 (start)

    structdef       go to state 24
    basetype        go to state 25
    function        go to state 26
    identdecl       go to state 27
    block           go to state 28
    statement       go to state 29
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 3

    0 $accept: start $end .

    $default  accept


State 4

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 5

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


State 6

   14 basetype: TOK_INT .

    $default  reduce using rule 14 (basetype)


State 7

   15 basetype: TOK_STRING .

    $default  reduce using rule 15 (basetype)


State 8

   38 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 40


State 9

   41 return: TOK_RETURN . ';'
   42       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 42
    '('            shift, and go to state 23

    expr       go to state 43
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 10

    6 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    7          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' '}'
    8          | TOK_STRUCT . TOK_IDENT '{' fielddeclarray '}'

    TOK_IDENT  shift, and go to state 44


State 11

   78 constant: TOK_NULL .

    $default  reduce using rule 78 (constant)


State 12

   64 allocator: TOK_NEW . TOK_IDENT '(' ')'
   65          | TOK_NEW . TOK_STRING '(' expr ')'
   66          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 45
    TOK_IDENT   shift, and go to state 46

    basetype  go to state 47


State 13

   17 basetype: TOK_IDENT .
   67 call: TOK_IDENT . '(' ')'
   68     | TOK_IDENT . '(' expr ')'
   69     | TOK_IDENT . arglist ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 48

    TOK_ARRAY  reduce using rule 17 (basetype)
    TOK_IDENT  reduce using rule 17 (basetype)
    $default   reduce using rule 72 (variable)

    arglist  go to state 49


State 14

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 15

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 16

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 17

   39 ifelse: TOK_IF . '(' expr ')' statement
   40       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 50


State 18

   57 expr: '+' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 51
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 19

   58 expr: '-' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 52
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 20

   56 expr: '!' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 53
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 21

   25 block: '{' . '}'
   27      | '{' . statement '}'
   36 statementarray: '{' . statement statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    '}'            shift, and go to state 54
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 56
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 22

   26 block: ';' .

    $default  reduce using rule 26 (block)


State 23

   61 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 57
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 24

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 25

   23 identdecl: basetype . TOK_IDENT
   24          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 58
    TOK_IDENT  shift, and go to state 59


State 26

    3 program: program function .

    $default  reduce using rule 3 (program)


State 27

   18 function: identdecl . '(' ')' block
   19         | identdecl . '(' identdecl ')' block
   20         | identdecl . identdeclarray ')' block
   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 60
    '('  shift, and go to state 61

    identdeclarray  go to state 62


State 28

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 29

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 30

   28 block: statementarray . '}'
   35 statementarray: statementarray . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    '}'            shift, and go to state 63
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 64
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 31

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


State 32

   31 statement: while .

    $default  reduce using rule 31 (statement)


State 33

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


State 34

   33 statement: return .

    $default  reduce using rule 33 (statement)


State 35

   34 statement: expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 78
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 36

   59 expr: allocator .

    $default  reduce using rule 59 (expr)


State 37

   60 expr: call .

    $default  reduce using rule 60 (expr)


State 38

   62 expr: variable .

    $default  reduce using rule 62 (expr)


State 39

   63 expr: constant .

    $default  reduce using rule 63 (expr)


State 40

   38 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 81
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 41

   67 call: TOK_IDENT . '(' ')'
   68     | TOK_IDENT . '(' expr ')'
   69     | TOK_IDENT . arglist ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 48

    $default  reduce using rule 72 (variable)

    arglist  go to state 49


State 42

   41 return: TOK_RETURN ';' .

    $default  reduce using rule 41 (return)


State 43

   42 return: TOK_RETURN expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 82
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 44

    6 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    7          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' '}'
    8          | TOK_STRUCT TOK_IDENT . '{' fielddeclarray '}'

    '{'  shift, and go to state 83


State 45

   15 basetype: TOK_STRING .
   65 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 84

    $default  reduce using rule 15 (basetype)


State 46

   17 basetype: TOK_IDENT .
   64 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 85

    $default  reduce using rule 17 (basetype)


State 47

   66 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 86


State 48

   67 call: TOK_IDENT '(' . ')'
   68     | TOK_IDENT '(' . expr ')'
   71 arglist: '(' . expr ',' expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23
    ')'            shift, and go to state 87

    expr       go to state 88
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 49

   69 call: TOK_IDENT arglist . ')'
   70 arglist: arglist . ',' expr

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 50

   39 ifelse: TOK_IF '(' . expr ')' statement
   40       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 91
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 51

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   57     | '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 57 (expr)]
    '['       [reduce using rule 57 (expr)]
    $default  reduce using rule 57 (expr)


State 52

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   58     | '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 58 (expr)]
    '['       [reduce using rule 58 (expr)]
    $default  reduce using rule 58 (expr)


State 53

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   56     | '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 56 (expr)]
    '['       [reduce using rule 56 (expr)]
    $default  reduce using rule 56 (expr)


State 54

   25 block: '{' '}' .

    $default  reduce using rule 25 (block)


State 55

   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 60


State 56

   27 block: '{' statement . '}'
   36 statementarray: '{' statement . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    '}'            shift, and go to state 92
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 93
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 57

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   61     | '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 94
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 58

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 95


State 59

   23 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 60

   37 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 96
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 61

   18 function: identdecl '(' . ')' block
   19         | identdecl '(' . identdecl ')' block
   21 identdeclarray: '(' . identdecl ',' identdecl

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97
    ')'         shift, and go to state 98

    basetype   go to state 25
    identdecl  go to state 99


State 62

   20 function: identdecl identdeclarray . ')' block
   22 identdeclarray: identdeclarray . ',' identdecl

    ')'  shift, and go to state 100
    ','  shift, and go to state 101


State 63

   28 block: statementarray '}' .

    $default  reduce using rule 28 (block)


State 64

   35 statementarray: statementarray statement .

    $default  reduce using rule 35 (statementarray)


State 65

   44 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 102
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 66

   49 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 103
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 67

   47 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 104
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 68

   48 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 105
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 69

   45 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 106
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 70

   46 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 107
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 71

   43 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 108
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 72

   50 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 109
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 73

   51 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 110
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 74

   52 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 111
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 75

   53 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 112
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 76

   54 expr: expr '%' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 113
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 77

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 114


State 78

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


State 79

   55 expr: expr '^' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 115
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 80

   73 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 116
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 81

   38 while: TOK_WHILE '(' expr . ')' statement
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 117
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 82

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


State 83

    6 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    7          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' '}'
    8          | TOK_STRUCT TOK_IDENT '{' . fielddeclarray '}'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 118

    fielddeclarray  go to state 119
    fielddecl       go to state 120
    basetype        go to state 121


State 84

   65 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 122
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 85

   64 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 123


State 86

   66 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 124
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 87

   67 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 67 (call)


State 88

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   68 call: TOK_IDENT '(' expr . ')'
   71 arglist: '(' expr . ',' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 125
    ','     shift, and go to state 126
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 89

   69 call: TOK_IDENT arglist ')' .

    $default  reduce using rule 69 (call)


State 90

   70 arglist: arglist ',' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 127
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 91

   39 ifelse: TOK_IF '(' expr . ')' statement
   40       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 128
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 92

   27 block: '{' statement '}' .

    $default  reduce using rule 27 (block)


State 93

   36 statementarray: '{' statement statement .

    $default  reduce using rule 36 (statementarray)


State 94

   61 expr: '(' expr ')' .

    $default  reduce using rule 61 (expr)


State 95

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 96

   37 vardecl: identdecl '=' expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 129
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 97

   17 basetype: TOK_IDENT .

    $default  reduce using rule 17 (basetype)


State 98

   18 function: identdecl '(' ')' . block

    '{'  shift, and go to state 21
    ';'  shift, and go to state 22

    block           go to state 130
    statementarray  go to state 30


State 99

   19 function: identdecl '(' identdecl . ')' block
   21 identdeclarray: '(' identdecl . ',' identdecl

    ')'  shift, and go to state 131
    ','  shift, and go to state 132


State 100

   20 function: identdecl identdeclarray ')' . block

    '{'  shift, and go to state 21
    ';'  shift, and go to state 22

    block           go to state 133
    statementarray  go to state 30


State 101

   22 identdeclarray: identdeclarray ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97

    basetype   go to state 25
    identdecl  go to state 134


State 102

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   44     | expr TOK_EQ expr .
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 44 (expr)]
    '['       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


State 103

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   49     | expr TOK_NE expr .
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 49 (expr)]
    '['       [reduce using rule 49 (expr)]
    $default  reduce using rule 49 (expr)


State 104

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   47     | expr TOK_LT expr .
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 47 (expr)]
    '['       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


State 105

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   48     | expr TOK_LE expr .
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 48 (expr)]
    '['       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


State 106

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   45     | expr TOK_GT expr .
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 45 (expr)]
    '['       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


State 107

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   46     | expr TOK_GE expr .
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 72
    '-'  shift, and go to state 73
    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 46 (expr)]
    '['       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


State 108

   43 expr: expr . '=' expr
   43     | expr '=' expr .
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80

    '^'       [reduce using rule 43 (expr)]
    '['       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 109

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   50     | expr '+' expr .
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 50 (expr)]
    '['       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)


State 110

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   51     | expr '-' expr .
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 74
    '/'  shift, and go to state 75
    '%'  shift, and go to state 76
    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 51 (expr)]
    '['       [reduce using rule 51 (expr)]
    $default  reduce using rule 51 (expr)


State 111

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   52     | expr '*' expr .
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 52 (expr)]
    '['       [reduce using rule 52 (expr)]
    $default  reduce using rule 52 (expr)


State 112

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   53     | expr '/' expr .
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 53 (expr)]
    '['       [reduce using rule 53 (expr)]
    $default  reduce using rule 53 (expr)


State 113

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   54     | expr '%' expr .
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 77
    '^'  shift, and go to state 79
    '['  shift, and go to state 80

    '^'       [reduce using rule 54 (expr)]
    '['       [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


State 114

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 115

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   55     | expr '^' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80

    TOK_EQ    [reduce using rule 55 (expr)]
    TOK_NE    [reduce using rule 55 (expr)]
    TOK_LT    [reduce using rule 55 (expr)]
    TOK_LE    [reduce using rule 55 (expr)]
    TOK_GT    [reduce using rule 55 (expr)]
    TOK_GE    [reduce using rule 55 (expr)]
    '='       [reduce using rule 55 (expr)]
    '+'       [reduce using rule 55 (expr)]
    '-'       [reduce using rule 55 (expr)]
    '*'       [reduce using rule 55 (expr)]
    '/'       [reduce using rule 55 (expr)]
    '%'       [reduce using rule 55 (expr)]
    '.'       [reduce using rule 55 (expr)]
    '^'       [reduce using rule 55 (expr)]
    '['       [reduce using rule 55 (expr)]
    $default  reduce using rule 55 (expr)


State 116

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80
    ']'     shift, and go to state 135


State 117

   38 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 136
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 118

    6 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 6 (structdef)


State 119

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddeclarray . '}'
    9 fielddeclarray: fielddeclarray . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 137

    fielddecl  go to state 138
    basetype   go to state 121


State 120

    7 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl . ';' '}'
   10 fielddeclarray: fielddecl . ';' fielddecl ';'

    ';'  shift, and go to state 139


State 121

   11 fielddecl: basetype . TOK_IDENT
   12          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 140
    TOK_IDENT  shift, and go to state 141


State 122

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   65 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 142
    '^'     shift, and go to state 79
    '['     shift, and go to state 80


State 123

   64 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 64 (allocator)


State 124

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   66 allocator: TOK_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80
    ']'     shift, and go to state 143


State 125

   68 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 68 (call)


State 126

   71 arglist: '(' expr ',' . expr

    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 41
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 144
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 127

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   70 arglist: arglist ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80

    $default  reduce using rule 70 (arglist)


State 128

   39 ifelse: TOK_IF '(' expr ')' . statement
   40       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 145
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 129

   37 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


State 130

   18 function: identdecl '(' ')' block .

    $default  reduce using rule 18 (function)


State 131

   19 function: identdecl '(' identdecl ')' . block

    '{'  shift, and go to state 21
    ';'  shift, and go to state 22

    block           go to state 146
    statementarray  go to state 30


State 132

   21 identdeclarray: '(' identdecl ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97

    basetype   go to state 25
    identdecl  go to state 147


State 133

   20 function: identdecl identdeclarray ')' block .

    $default  reduce using rule 20 (function)


State 134

   22 identdeclarray: identdeclarray ',' identdecl .

    $default  reduce using rule 22 (identdeclarray)


State 135

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


State 136

   38 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 38 (while)


State 137

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddeclarray '}' .

    $default  reduce using rule 8 (structdef)


State 138

    9 fielddeclarray: fielddeclarray fielddecl . ';'

    ';'  shift, and go to state 148


State 139

    7 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' . '}'
   10 fielddeclarray: fielddecl ';' . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_CHAR    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 149

    fielddecl  go to state 150
    basetype   go to state 121


State 140

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 151


State 141

   11 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 142

   65 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocator)


State 143

   66 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 66 (allocator)


State 144

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_GE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_NE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | expr . '^' expr
   71 arglist: '(' expr ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 65
    TOK_NE  shift, and go to state 66
    TOK_LT  shift, and go to state 67
    TOK_LE  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    '+'     shift, and go to state 72
    '-'     shift, and go to state 73
    '*'     shift, and go to state 74
    '/'     shift, and go to state 75
    '%'     shift, and go to state 76
    '.'     shift, and go to state 77
    '^'     shift, and go to state 79
    '['     shift, and go to state 80

    $default  reduce using rule 71 (arglist)


State 145

   39 ifelse: TOK_IF '(' expr ')' statement .
   40       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 152

    TOK_ELSE  [reduce using rule 39 (ifelse)]
    $default  reduce using rule 39 (ifelse)


State 146

   19 function: identdecl '(' identdecl ')' block .

    $default  reduce using rule 19 (function)


State 147

   21 identdeclarray: '(' identdecl ',' identdecl .

    $default  reduce using rule 21 (identdeclarray)


State 148

    9 fielddeclarray: fielddeclarray fielddecl ';' .

    $default  reduce using rule 9 (fielddeclarray)


State 149

    7 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}' .

    $default  reduce using rule 7 (structdef)


State 150

   10 fielddeclarray: fielddecl ';' fielddecl . ';'

    ';'  shift, and go to state 153


State 151

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 152

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_WHILE      shift, and go to state 8
    TOK_RETURN     shift, and go to state 9
    TOK_NULL       shift, and go to state 11
    TOK_NEW        shift, and go to state 12
    TOK_IDENT      shift, and go to state 13
    TOK_INTCON     shift, and go to state 14
    TOK_CHARCON    shift, and go to state 15
    TOK_STRINGCON  shift, and go to state 16
    TOK_IF         shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '{'            shift, and go to state 21
    ';'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype        go to state 25
    identdecl       go to state 55
    block           go to state 28
    statement       go to state 154
    statementarray  go to state 30
    vardecl         go to state 31
    while           go to state 32
    ifelse          go to state 33
    return          go to state 34
    expr            go to state 35
    allocator       go to state 36
    call            go to state 37
    variable        go to state 38
    constant        go to state 39


State 153

   10 fielddeclarray: fielddecl ';' fielddecl ';' .

    $default  reduce using rule 10 (fielddeclarray)


State 154

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
